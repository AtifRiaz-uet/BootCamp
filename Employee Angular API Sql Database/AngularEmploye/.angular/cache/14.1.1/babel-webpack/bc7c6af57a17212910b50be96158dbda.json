{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/4098/Desktop/Angular/Employee_Angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../interaction.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\n\nfunction inputformComponent_div_10_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 13);\n    i0.ɵɵtext(1, \"Please Enter Name!\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction inputformComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, inputformComponent_div_10_span_1_Template, 2, 0, \"span\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !((tmp_0_0 = ctx_r0.reactiveForm.get(\"name\")) == null ? null : tmp_0_0.valid));\n  }\n}\n\nfunction inputformComponent_div_15_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 13);\n    i0.ɵɵtext(1, \"Please Enter Valid ID!\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction inputformComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, inputformComponent_div_15_span_1_Template, 2, 0, \"span\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !((tmp_0_0 = ctx_r1.reactiveForm.get(\"id\")) == null ? null : tmp_0_0.valid));\n  }\n}\n\nexport let inputformComponent = /*#__PURE__*/(() => {\n  class inputformComponent {\n    constructor(interactionService) {\n      this.interactionService = interactionService;\n    }\n\n    ngOnInit() {\n      //Initializing New FormGroup and three FormControls \n      this.reactiveForm = new FormGroup({\n        name: new FormControl('', Validators.required),\n        id: new FormControl(0, [Validators.min(1), Validators.required]),\n        address: new FormControl('')\n      });\n    }\n\n    resetForm() {\n      this.reactiveForm.markAsUntouched();\n      this.reactiveForm.setValue({\n        name: '',\n        id: null,\n        address: ''\n      });\n    } //Posting Value to API through Service\n\n\n    onConfim() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this.reactiveForm.valid) {\n          try {\n            //Getting New values\n            _this.name = _this.reactiveForm.value.name;\n            _this.id = _this.reactiveForm.value.id;\n            _this.address = _this.reactiveForm.value.address;\n            console.log('That is great, All Set'); //Used to Reset Form After Pressing Confirm Button but it can also be done by built-in reset()\n            //Use these variables to Call Post Function from Services\n\n            console.log(_this.reactiveForm);\n\n            _this.resetForm(); // this.reactiveForm.reset();\n\n          } catch (error) {\n            console.log(error);\n          }\n        } //If user unnotice about there is something missing and confirm it this will show Alert!\n        else {\n          alert('There is Something Wrong!');\n        }\n      })();\n    }\n\n  }\n\n  inputformComponent.ɵfac = function inputformComponent_Factory(t) {\n    return new (t || inputformComponent)(i0.ɵɵdirectiveInject(i1.InteractionService));\n  };\n\n  inputformComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: inputformComponent,\n    selectors: [[\"app-inputform\"]],\n    decls: 28,\n    vars: 6,\n    consts: [[1, \"d-flex\", \"justify-content-center\"], [1, \"form\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [\"for\", \"newName\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"inputName\", \"formControlName\", \"name\", \"placeholder\", \"Employee Name\", 1, \"form-control\"], [4, \"ngIf\"], [\"for\", \"newId\", 1, \"form-label\"], [\"type\", \"number\", \"id\", \"inputId\", \"formControlName\", \"id\", \"placeholder\", \"Employee ID\", 1, \"form-control\"], [\"for\", \"newAddress\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"inputAddress\", \"formControlName\", \"address\", \"placeholder\", \"Employee Address\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [\"style\", \"color:red\", 4, \"ngIf\"], [2, \"color\", \"red\"]],\n    template: function inputformComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h2\");\n        i0.ɵɵtext(3, \"Add or Update Employe\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(4, \"hr\");\n        i0.ɵɵelementStart(5, \"form\", 2);\n        i0.ɵɵlistener(\"ngSubmit\", function inputformComponent_Template_form_ngSubmit_5_listener() {\n          return ctx.onConfim();\n        });\n        i0.ɵɵelementStart(6, \"div\", 3)(7, \"label\", 4);\n        i0.ɵɵtext(8, \"Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"input\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(10, inputformComponent_div_10_Template, 2, 1, \"div\", 6);\n        i0.ɵɵelementStart(11, \"div\", 3)(12, \"label\", 7);\n        i0.ɵɵtext(13, \"ID\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(14, \"input\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(15, inputformComponent_div_15_Template, 2, 1, \"div\", 6);\n        i0.ɵɵelementStart(16, \"div\", 3)(17, \"label\", 9);\n        i0.ɵɵtext(18, \"Address\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(19, \"input\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"button\", 11);\n        i0.ɵɵtext(21, \"Confirm\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(22, \"div\");\n        i0.ɵɵtext(23);\n        i0.ɵɵelement(24, \"hr\");\n        i0.ɵɵtext(25);\n        i0.ɵɵelement(26, \"hr\");\n        i0.ɵɵtext(27);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formGroup\", ctx.reactiveForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.reactiveForm.touched);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.reactiveForm.touched);\n        i0.ɵɵadvance(8);\n        i0.ɵɵtextInterpolate1(\" \", ctx.name, \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.id, \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.address, \"\\n\");\n      }\n    },\n    dependencies: [i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n    styles: [\".form[_ngcontent-%COMP%]{border-radius:5px;background-color:#7fffd4;padding:20px;width:420px;margin:10 auto;font-family:Times New Roman,Times,serif}input.ng-invalid.ng-touched[_ngcontent-%COMP%]{border:red 2px solid}input[_ngcontent-%COMP%]::-webkit-outer-spin-button, input[_ngcontent-%COMP%]::-webkit-inner-spin-button{-webkit-appearance:none;margin:0}\"]\n  });\n  return inputformComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}