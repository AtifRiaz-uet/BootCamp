{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/4098/Desktop/Angular/Employee_Angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../interaction.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\n\nfunction inputformComponent_div_10_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 13);\n    i0.ɵɵtext(1, \"Please Enter Name!\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction inputformComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, inputformComponent_div_10_span_1_Template, 2, 0, \"span\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !((tmp_0_0 = ctx_r0.reactiveForm.get(\"name\")) == null ? null : tmp_0_0.valid));\n  }\n}\n\nfunction inputformComponent_div_15_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 13);\n    i0.ɵɵtext(1, \"Please Enter Valid ID!\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction inputformComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, inputformComponent_div_15_span_1_Template, 2, 0, \"span\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !((tmp_0_0 = ctx_r1.reactiveForm.get(\"id\")) == null ? null : tmp_0_0.valid));\n  }\n}\n\nexport class inputformComponent {\n  constructor(interactionService) {\n    this.interactionService = interactionService;\n  }\n\n  ngOnInit() {\n    //Initializing New FormGroup and three FormControls \n    this.reactiveForm = new FormGroup({\n      name: new FormControl('', Validators.required),\n      id: new FormControl(0, [Validators.min(1), Validators.required]),\n      address: new FormControl('')\n    });\n  }\n\n  resetForm() {\n    this.reactiveForm.markAsUntouched();\n    this.reactiveForm.setValue({\n      name: '',\n      id: null,\n      address: ''\n    });\n  } //Posting Value to API through Service\n\n\n  onConfim() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.reactiveForm.valid) {\n        try {\n          //Getting New values\n          _this.name = _this.reactiveForm.value.name;\n          _this.id = _this.reactiveForm.value.id;\n          _this.address = _this.reactiveForm.value.address;\n          console.log('That is great, All Set'); //Used to Reset Form After Pressing Confirm Button but it can also be done by built-in reset()\n          //Use these variables to Call Post Function from Services\n\n          console.log(_this.reactiveForm);\n\n          _this.resetForm(); // this.reactiveForm.reset();\n\n        } catch (error) {\n          console.log(error);\n        }\n      } //If user unnotice about there is something missing and confirm it this will show Alert!\n      else {\n        alert('There is Something Wrong!');\n      }\n    })();\n  }\n\n}\n\ninputformComponent.ɵfac = function inputformComponent_Factory(t) {\n  return new (t || inputformComponent)(i0.ɵɵdirectiveInject(i1.InteractionService));\n};\n\ninputformComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: inputformComponent,\n  selectors: [[\"app-inputform\"]],\n  decls: 28,\n  vars: 6,\n  consts: [[1, \"d-flex\", \"justify-content-center\"], [1, \"form\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [\"for\", \"newName\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"inputName\", \"formControlName\", \"name\", \"placeholder\", \"Employee Name\", 1, \"form-control\"], [4, \"ngIf\"], [\"for\", \"newId\", 1, \"form-label\"], [\"type\", \"number\", \"id\", \"inputId\", \"formControlName\", \"id\", \"placeholder\", \"Employee ID\", 1, \"form-control\"], [\"for\", \"newAddress\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"inputAddress\", \"formControlName\", \"address\", \"placeholder\", \"Employee Address\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [\"style\", \"color:red\", 4, \"ngIf\"], [2, \"color\", \"red\"]],\n  template: function inputformComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h2\");\n      i0.ɵɵtext(3, \"Add or Update Employe\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"hr\");\n      i0.ɵɵelementStart(5, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function inputformComponent_Template_form_ngSubmit_5_listener() {\n        return ctx.onConfim();\n      });\n      i0.ɵɵelementStart(6, \"div\", 3)(7, \"label\", 4);\n      i0.ɵɵtext(8, \"Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"input\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(10, inputformComponent_div_10_Template, 2, 1, \"div\", 6);\n      i0.ɵɵelementStart(11, \"div\", 3)(12, \"label\", 7);\n      i0.ɵɵtext(13, \"ID\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(14, \"input\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(15, inputformComponent_div_15_Template, 2, 1, \"div\", 6);\n      i0.ɵɵelementStart(16, \"div\", 3)(17, \"label\", 9);\n      i0.ɵɵtext(18, \"Address\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(19, \"input\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"button\", 11);\n      i0.ɵɵtext(21, \"Confirm\");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(22, \"div\");\n      i0.ɵɵtext(23);\n      i0.ɵɵelement(24, \"hr\");\n      i0.ɵɵtext(25);\n      i0.ɵɵelement(26, \"hr\");\n      i0.ɵɵtext(27);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"formGroup\", ctx.reactiveForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.reactiveForm.touched);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.reactiveForm.touched);\n      i0.ɵɵadvance(8);\n      i0.ɵɵtextInterpolate1(\" \", ctx.name, \" \");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.id, \" \");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.address, \"\\n\");\n    }\n  },\n  dependencies: [i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n  styles: [\".form[_ngcontent-%COMP%]{\\r\\n    border-radius: 5px;\\r\\n    background-color: aquamarine;\\r\\n    padding: 20px;\\r\\n    width: 420px;\\r\\n    margin: 10 auto;\\r\\n    font-family: 'Times New Roman', Times, serif;\\r\\n}\\r\\ninput.ng-invalid.ng-touched[_ngcontent-%COMP%]{\\r\\n    border:red 2px solid;\\r\\n\\r\\n}\\r\\n\\r\\ninput[_ngcontent-%COMP%]::-webkit-outer-spin-button, input[_ngcontent-%COMP%]::-webkit-inner-spin-button {\\r\\n  -webkit-appearance: none;\\r\\n  margin: 0;\\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlucHV0Zm9ybS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksa0JBQWtCO0lBQ2xCLDRCQUE0QjtJQUM1QixhQUFhO0lBQ2IsWUFBWTtJQUNaLGVBQWU7SUFDZiw0Q0FBNEM7QUFDaEQ7QUFDQTtJQUNJLG9CQUFvQjs7QUFFeEI7QUFDQTtnQ0FDZ0M7QUFDaEM7O0VBRUUsd0JBQXdCO0VBQ3hCLFNBQVM7QUFDWCIsImZpbGUiOiJpbnB1dGZvcm0uY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5mb3Jte1xyXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYXF1YW1hcmluZTtcclxuICAgIHBhZGRpbmc6IDIwcHg7XHJcbiAgICB3aWR0aDogNDIwcHg7XHJcbiAgICBtYXJnaW46IDEwIGF1dG87XHJcbiAgICBmb250LWZhbWlseTogJ1RpbWVzIE5ldyBSb21hbicsIFRpbWVzLCBzZXJpZjtcclxufVxyXG5pbnB1dC5uZy1pbnZhbGlkLm5nLXRvdWNoZWR7XHJcbiAgICBib3JkZXI6cmVkIDJweCBzb2xpZDtcclxuXHJcbn1cclxuLyogVG8gUkVNT1ZFIFNQSU5ORVIgT1IgU0NST0xMRVIgRk9SIE5VTUJFUlxyXG4vKiBDaHJvbWUsIFNhZmFyaSwgRWRnZSwgT3BlcmEgKi9cclxuaW5wdXQ6Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24sXHJcbmlucHV0Ojotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uIHtcclxuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XHJcbiAgbWFyZ2luOiAwO1xyXG59Il19 */\"]\n});","map":{"version":3,"mappings":";AACA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,UAAjC,QAAmD,gBAAnD;;;;;;;;ICSUC;IAAmEA;IAAkBA;;;;;;IADzFA;IACIA;IACJA;;;;;;IAD6BA;IAAAA;;;;;;IAOzBA;IAAiEA;IAAsBA;;;;;;IAD3FA;IACIA;IACJA;;;;;;IAD6BA;IAAAA;;;;ADJnC,OAAM,MAAOC,kBAAP,CAAyB;EAS7BC,YAAoBC,kBAApB,EAAyD;IAArC;EAAyC;;EAE7DC,QAAQ;IACN;IACA,KAAKC,YAAL,GAAoB,IAAIP,SAAJ,CAAe;MACjCQ,IAAI,EAAC,IAAIT,WAAJ,CAAgB,EAAhB,EAAmBE,UAAU,CAACQ,QAA9B,CAD4B;MAEjCC,EAAE,EAAC,IAAIX,WAAJ,CAAgB,CAAhB,EAAkB,CAACE,UAAU,CAACU,GAAX,CAAe,CAAf,CAAD,EAAmBV,UAAU,CAACQ,QAA9B,CAAlB,CAF8B;MAGjCG,OAAO,EAAC,IAAIb,WAAJ,CAAgB,EAAhB;IAHyB,CAAf,CAApB;EAMD;;EACDc,SAAS;IACP,KAAKN,YAAL,CAAkBO,eAAlB;IACA,KAAKP,YAAL,CAAkBQ,QAAlB,CAA2B;MAC3BP,IAAI,EAAC,EADsB;MAE3BE,EAAE,EAAC,IAFwB;MAG3BE,OAAO,EAAC;IAHmB,CAA3B;EAKD,CA3B4B,CA4B7B;;;EACMI,QAAQ;IAAA;;IAAA;MAEZ,IAAI,KAAI,CAACT,YAAL,CAAkBU,KAAtB,EACA;QACE,IAAG;UACD;UACF,KAAI,CAACT,IAAL,GAAU,KAAI,CAACD,YAAL,CAAkBW,KAAlB,CAAwBV,IAAlC;UACA,KAAI,CAACE,EAAL,GAAQ,KAAI,CAACH,YAAL,CAAkBW,KAAlB,CAAwBR,EAAhC;UACA,KAAI,CAACE,OAAL,GAAa,KAAI,CAACL,YAAL,CAAkBW,KAAlB,CAAwBN,OAArC;UACAO,OAAO,CAACC,GAAR,CAAY,wBAAZ,EALG,CAMH;UACA;;UACAD,OAAO,CAACC,GAAR,CAAY,KAAI,CAACb,YAAjB;;UACA,KAAI,CAACM,SAAL,GATG,CAWH;;QAEC,CAbD,CAcA,OAAMQ,KAAN,EAAY;UACVF,OAAO,CAACC,GAAR,CAAYC,KAAZ;QAED;MAEF,CArBD,CAsBA;MAtBA,KAuBI;QACFC,KAAK,CAAC,2BAAD,CAAL;MAED;IA5BW;EA+Bb;;AA5D4B;;;mBAAlBnB,oBAAkBD;AAAA;;;QAAlBC;EAAkBoB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCb/BzB,+BAA2C,CAA3C,EAA2C,KAA3C,EAA2C,CAA3C,EAA2C,CAA3C,EAA2C,IAA3C;MAEUA;MAAqBA;MACzBA;MACAA;MAAiCA;QAAA,OAAY0B,cAAZ;MAAsB,CAAtB;MACjC1B,+BAAkB,CAAlB,EAAkB,OAAlB,EAAkB,CAAlB;MAC4CA;MAAIA;MAC5CA;MACJA;MACAA;MAGAA,gCAAkB,EAAlB,EAAkB,OAAlB,EAAkB,CAAlB;MAC0CA;MAAEA;MACxCA;MACJA;MACAA;MAGAA,gCAAkB,EAAlB,EAAkB,OAAlB,EAAkB,CAAlB;MAC+CA;MAAOA;MAClDA;MACJA;MACAA;MAA8CA;MAAOA;MAI3DA;MACEA;MACAA;MACAA;MACAA;MACAA;MACFA;;;;MA7BYA;MAAAA;MAKAA;MAAAA;MAOAA;MAAAA;MAYVA;MAAAA;MAEAA;MAAAA;MAEAA;MAAAA","names":["FormControl","FormGroup","Validators","i0","inputformComponent","constructor","interactionService","ngOnInit","reactiveForm","name","required","id","min","address","resetForm","markAsUntouched","setValue","onConfim","valid","value","console","log","error","alert","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\4098\\Desktop\\Angular\\Employee_Angular\\src\\app\\inputform\\inputform.component.ts","C:\\Users\\4098\\Desktop\\Angular\\Employee_Angular\\src\\app\\inputform\\inputform.component.html"],"sourcesContent":["import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { map } from 'rxjs';\nimport { InteractionService } from '../interaction.service';\nimport { Employe } from '../Model/Employe';\nimport { Observable, Subject } from 'rxjs';\n\n\n@Component({\n  selector: 'app-inputform',\n  templateUrl: './inputform.component.html',\n  styleUrls: ['./inputform.component.css']\n})\nexport class inputformComponent implements OnInit {\n  //Assigning New variables \n  reactiveForm! :FormGroup; //New Object of FromGroup\n  name!:string;\n  id!:number;\n  address!:string;\n\n\n\n  constructor(private interactionService:InteractionService) {}\n  \n  ngOnInit(): void {\n    //Initializing New FormGroup and three FormControls \n    this.reactiveForm = new FormGroup ({\n      name:new FormControl('',Validators.required),\n      id:new FormControl(0,[Validators.min(1),Validators.required]),\n      address:new FormControl(''),\n\n    });\n  }\n  resetForm()\n  { this.reactiveForm.markAsUntouched();\n    this.reactiveForm.setValue({\n    name:'',\n    id:null,\n    address:''\n    })\n  }\n  //Posting Value to API through Service\n  async onConfim()\n  {\n    if (this.reactiveForm.valid)\n    {\n      try{\n        //Getting New values\n      this.name=this.reactiveForm.value.name;\n      this.id=this.reactiveForm.value.id;\n      this.address=this.reactiveForm.value.address;\n      console.log('That is great, All Set');\n      //Used to Reset Form After Pressing Confirm Button but it can also be done by built-in reset()\n      //Use these variables to Call Post Function from Services\n      console.log(this.reactiveForm)\n      this.resetForm();\n\n      // this.reactiveForm.reset();\n\n      }\n      catch(error){\n        console.log(error)\n\n      }\n      \n    }\n    //If user unnotice about there is something missing and confirm it this will show Alert!\n    else{\n      alert('There is Something Wrong!');\n\n    }\n    \n\n  }\n  \n\n}\n\n","<div class=\"d-flex justify-content-center\">\r\n  <div class=\"form\">\r\n      <h2>Add or Update Employe</h2>\r\n      <hr>\r\n      <form [formGroup]=\"reactiveForm\" (ngSubmit)=\"onConfim()\">\r\n      <div class=\"mb-3\">\r\n          <label for=\"newName\" class=\"form-label\">Name</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"inputName\" formControlName=\"name\" placeholder=\"Employee Name\">\r\n      </div>\r\n      <div *ngIf=\"reactiveForm.touched\">\r\n          <span style=\"color:red\" *ngIf=\"!(reactiveForm.get('name'))?.valid\">Please Enter Name!</span>\r\n      </div>\r\n      <div class=\"mb-3\">\r\n          <label for=\"newId\" class=\"form-label\">ID</label>\r\n          <input type=\"number\" class=\"form-control\" id=\"inputId\" formControlName=\"id\" placeholder=\"Employee ID\">\r\n      </div>\r\n      <div *ngIf=\"reactiveForm.touched\">\r\n          <span style=\"color:red\" *ngIf=\"!(reactiveForm.get('id'))?.valid\">Please Enter Valid ID!</span>\r\n      </div>\r\n      <div class=\"mb-3\">\r\n          <label for=\"newAddress\" class=\"form-label\">Address</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"inputAddress\" formControlName=\"address\" placeholder=\"Employee Address\">\r\n      </div>\r\n      <button type=\"submit\" class=\"btn btn-primary\">Confirm</button>\r\n      </form>\r\n  </div>\r\n</div>\r\n<div>\r\n  {{this.name}}\r\n  <hr>\r\n  {{this.id}}\r\n  <hr>\r\n  {{this.address}}\r\n</div>\r\n"]},"metadata":{},"sourceType":"module"}