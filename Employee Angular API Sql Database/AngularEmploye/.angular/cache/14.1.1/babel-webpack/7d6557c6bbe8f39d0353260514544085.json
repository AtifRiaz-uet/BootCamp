{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/4098/Desktop/Angular/Employee_Angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../interaction.service\";\nimport * as i2 from \"@angular/forms\";\nexport class inputformComponent {\n  constructor(interactionService) {\n    this.interactionService = interactionService;\n  }\n\n  ngOnInit() {\n    //Initializing New FormGroup and three FormControls \n    this.reactiveForm = new FormGroup({\n      name: new FormControl('', Validators.required),\n      id: new FormControl(0, [Validators.min(1), Validators.required]),\n      address: new FormControl('')\n    });\n  }\n\n  resetForm() {\n    this.reactiveForm.markAsUntouched();\n    this.reactiveForm.setValue({\n      name: '',\n      id: null,\n      address: ''\n    });\n  } //Posting Value to API through Service\n\n\n  onConfim() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.reactiveForm.valid) {\n        try {\n          //Getting New values\n          _this.name = _this.reactiveForm.value.name;\n          _this.id = _this.reactiveForm.value.id;\n          _this.address = _this.reactiveForm.value.address;\n          console.log('That is great, All Set'); //Used to Reset Form After Pressing Confirm Button but it can also be done by built-in reset()\n          //Use these variables to Call Post Function from Services\n\n          console.log(_this.reactiveForm);\n\n          _this.resetForm(); // this.reactiveForm.reset();\n\n        } catch (error) {\n          console.log(error);\n        }\n      } //If user unnotice about there is something missing and confirm it this will show Alert!\n      else {\n        alert('There is Something Wrong!');\n      }\n    })();\n  }\n\n}\n\ninputformComponent.ɵfac = function inputformComponent_Factory(t) {\n  return new (t || inputformComponent)(i0.ɵɵdirectiveInject(i1.InteractionService));\n};\n\ninputformComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: inputformComponent,\n  selectors: [[\"app-inputform\"]],\n  decls: 17,\n  vars: 2,\n  consts: [[1, \"container-fluid\"], [1, \"form-group\"], [\"type\", \"text\", \"name\", \"title\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"text\", \"name\", \"description\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [1, \"btn\", \"btn-primary\"]],\n  template: function inputformComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h3\");\n      i0.ɵɵtext(1, \"Inputform\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\", 0)(3, \"h5\");\n      i0.ɵɵtext(4, \"Add in To Employees List\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"form\")(6, \"div\", 1)(7, \"label\");\n      i0.ɵɵtext(8, \"New Employee Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"input\", 2);\n      i0.ɵɵlistener(\"ngModelChange\", function inputformComponent_Template_input_ngModelChange_9_listener($event) {\n        return ctx._name = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(10, \"div\", 1)(11, \"label\");\n      i0.ɵɵtext(12, \"Desgination\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"input\", 3);\n      i0.ɵɵlistener(\"ngModelChange\", function inputformComponent_Template_input_ngModelChange_13_listener($event) {\n        return ctx._desg = $event;\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelement(14, \"br\");\n      i0.ɵɵelementStart(15, \"button\", 4);\n      i0.ɵɵtext(16, \"Confirm \");\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"ngModel\", ctx._name);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx._desg);\n    }\n  },\n  dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.NgModel, i2.NgForm],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJpbnB1dGZvcm0uY29tcG9uZW50LmNzcyJ9 */\"]\n});","map":{"version":3,"mappings":";AACA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,UAAjC,QAAmD,gBAAnD;;;;AAYA,OAAM,MAAOC,kBAAP,CAAyB;EAS7BC,YAAoBC,kBAApB,EAAyD;IAArC;EAAyC;;EAE7DC,QAAQ;IACN;IACA,KAAKC,YAAL,GAAoB,IAAIN,SAAJ,CAAe;MACjCO,IAAI,EAAC,IAAIR,WAAJ,CAAgB,EAAhB,EAAmBE,UAAU,CAACO,QAA9B,CAD4B;MAEjCC,EAAE,EAAC,IAAIV,WAAJ,CAAgB,CAAhB,EAAkB,CAACE,UAAU,CAACS,GAAX,CAAe,CAAf,CAAD,EAAmBT,UAAU,CAACO,QAA9B,CAAlB,CAF8B;MAGjCG,OAAO,EAAC,IAAIZ,WAAJ,CAAgB,EAAhB;IAHyB,CAAf,CAApB;EAMD;;EACDa,SAAS;IACP,KAAKN,YAAL,CAAkBO,eAAlB;IACA,KAAKP,YAAL,CAAkBQ,QAAlB,CAA2B;MAC3BP,IAAI,EAAC,EADsB;MAE3BE,EAAE,EAAC,IAFwB;MAG3BE,OAAO,EAAC;IAHmB,CAA3B;EAKD,CA3B4B,CA4B7B;;;EACMI,QAAQ;IAAA;;IAAA;MAEZ,IAAI,KAAI,CAACT,YAAL,CAAkBU,KAAtB,EACA;QACE,IAAG;UACD;UACF,KAAI,CAACT,IAAL,GAAU,KAAI,CAACD,YAAL,CAAkBW,KAAlB,CAAwBV,IAAlC;UACA,KAAI,CAACE,EAAL,GAAQ,KAAI,CAACH,YAAL,CAAkBW,KAAlB,CAAwBR,EAAhC;UACA,KAAI,CAACE,OAAL,GAAa,KAAI,CAACL,YAAL,CAAkBW,KAAlB,CAAwBN,OAArC;UACAO,OAAO,CAACC,GAAR,CAAY,wBAAZ,EALG,CAMH;UACA;;UACAD,OAAO,CAACC,GAAR,CAAY,KAAI,CAACb,YAAjB;;UACA,KAAI,CAACM,SAAL,GATG,CAWH;;QAEC,CAbD,CAcA,OAAMQ,KAAN,EAAY;UACVF,OAAO,CAACC,GAAR,CAAYC,KAAZ;QAED;MAEF,CArBD,CAsBA;MAtBA,KAuBI;QACFC,KAAK,CAAC,2BAAD,CAAL;MAED;IA5BW;EA+Bb;;AA5D4B;;;mBAAlBnB,oBAAkBoB;AAAA;;;QAAlBpB;EAAkBqB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCb/BL;MAAIA;MAASA;MACbA,+BAA6B,CAA7B,EAA6B,IAA7B;MACQA;MAAwBA;MAC5BA,6BAAO,CAAP,EAAO,KAAP,EAAO,CAAP,EAAO,CAAP,EAAO,OAAP;MAEWA;MAAiBA;MACxBA;MAAwCA;QAAA;MAAA;MAAxCA;MAGFA,gCAAwB,EAAxB,EAAwB,OAAxB;MACSA;MAAWA;MAClBA;MAAwCA;QAAA;MAAA;MAAxCA;MAIJA;MACAA;MAAiCA;MAAQA;;;;MAVGA;MAAAA;MAKAA;MAAAA","names":["FormControl","FormGroup","Validators","inputformComponent","constructor","interactionService","ngOnInit","reactiveForm","name","required","id","min","address","resetForm","markAsUntouched","setValue","onConfim","valid","value","console","log","error","alert","i0","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\4098\\Desktop\\Angular\\Employee_Angular\\src\\app\\inputform\\inputform.component.ts","C:\\Users\\4098\\Desktop\\Angular\\Employee_Angular\\src\\app\\inputform\\inputform.component.html"],"sourcesContent":["import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { map } from 'rxjs';\nimport { InteractionService } from '../interaction.service';\nimport { Employe } from '../Model/Employe';\nimport { Observable, Subject } from 'rxjs';\n\n\n@Component({\n  selector: 'app-inputform',\n  templateUrl: './inputform.component.html',\n  styleUrls: ['./inputform.component.css']\n})\nexport class inputformComponent implements OnInit {\n  //Assigning New variables \n  reactiveForm! :FormGroup; //New Object of FromGroup\n  name!:string;\n  id!:number;\n  address!:string;\n\n\n\n  constructor(private interactionService:InteractionService) {}\n  \n  ngOnInit(): void {\n    //Initializing New FormGroup and three FormControls \n    this.reactiveForm = new FormGroup ({\n      name:new FormControl('',Validators.required),\n      id:new FormControl(0,[Validators.min(1),Validators.required]),\n      address:new FormControl(''),\n\n    });\n  }\n  resetForm()\n  { this.reactiveForm.markAsUntouched();\n    this.reactiveForm.setValue({\n    name:'',\n    id:null,\n    address:''\n    })\n  }\n  //Posting Value to API through Service\n  async onConfim()\n  {\n    if (this.reactiveForm.valid)\n    {\n      try{\n        //Getting New values\n      this.name=this.reactiveForm.value.name;\n      this.id=this.reactiveForm.value.id;\n      this.address=this.reactiveForm.value.address;\n      console.log('That is great, All Set');\n      //Used to Reset Form After Pressing Confirm Button but it can also be done by built-in reset()\n      //Use these variables to Call Post Function from Services\n      console.log(this.reactiveForm)\n      this.resetForm();\n\n      // this.reactiveForm.reset();\n\n      }\n      catch(error){\n        console.log(error)\n\n      }\n      \n    }\n    //If user unnotice about there is something missing and confirm it this will show Alert!\n    else{\n      alert('There is Something Wrong!');\n\n    }\n    \n\n  }\n  \n\n}\n\n","<h3>Inputform</h3>\r\n<div class=\"container-fluid\">\r\n    <h5>Add in To Employees List</h5>\r\n    <form >\r\n      <div class=\"form-group\">\r\n        <label>New Employee Name</label>\r\n        <input type=\"text\" class=\"form-control\" [(ngModel)]=\"_name\" name=\"title\" >\r\n      </div>\r\n  \r\n      <div class=\"form-group\">\r\n        <label>Desgination</label>\r\n        <input type=\"text\" class=\"form-control\" [(ngModel)]=\"_desg\" name=\"description\">\r\n      </div>\r\n      \r\n    </form>\r\n    <br>\r\n    <button class=\"btn btn-primary\" >Confirm </button>\r\n  \r\n  </div>"]},"metadata":{},"sourceType":"module"}